import pandas as pd
import tkinter as tk
from tkinter import filedialog

def prepare_df(df, input_cols, rename_cols):
    df = df[input_cols].drop_duplicates()
    df.columns = rename_cols
    return df

def main():
    root = tk.Tk()
    root.withdraw()

    # –í—ã–±–æ—Ä 5 —Ñ–∞–π–ª–æ–≤
    print("üîé –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ 1 (Code, Destination, Price, Increment)")
    file1 = filedialog.askopenfilename()
    df1 = pd.read_excel(file1)

    print("üîé –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ 2 (Code, Destination, Price, Increment)")
    file2 = filedialog.askopenfilename()
    df2 = pd.read_excel(file2)

    print("üîé –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ 3 (Code, Destination, Price, Increment)")
    file3 = filedialog.askopenfilename()
    df3 = pd.read_excel(file3)

    print("üîé –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ 4 (Code, Destination, Price, Increment)")
    file4 = filedialog.askopenfilename()
    df4 = pd.read_excel(file4)

    print("üîé –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ 5 (Code, Destination, Price, Increment)")
    file5 = filedialog.askopenfilename()
    df5 = pd.read_excel(file5)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df1 = prepare_df(df1, ['Code', 'Destination', 'Price', 'Increment'],
                     ['Code', 'Destination Pxn', 'Pxn Price', 'Pxn Increment'])
    df2 = prepare_df(df2, ['Code', 'Destination', 'Price', 'Increment'],
                     ['Code', 'Destination SkyTel', 'SkyTel Price', 'SkyTel Increment'])
    df3 = prepare_df(df3, ['Code', 'Destination', 'Price', 'Increment'],
                     ['Code', 'Destination SmartNet', 'SmartNet Price', 'SmartNet Increment'])
    df4 = prepare_df(df4, ['Code', 'Destination', 'Price', 'Increment'],
                     ['Code', 'Destination SVM', 'SVM Price', 'SVM Increment'])
    df5 = prepare_df(df5, ['Code', 'Destination', 'Price', 'Increment'],
                     ['Code', 'Destination RingHD', 'RingHD Price', 'RingHD Increment'])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ Code
    df_all = pd.merge(df1, df2, on='Code', how='outer')
    df_all = pd.merge(df_all, df3, on='Code', how='outer')
    df_all = pd.merge(df_all, df4, on='Code', how='outer')
    df_all = pd.merge(df_all, df5, on='Code', how='outer')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    price_cols = ['Pxn Price', 'SkyTel Price', 'SmartNet Price', 'SVM Price', 'RingHD Price']
    for col in price_cols:
        df_all[col] = pd.to_numeric(df_all[col], errors='coerce')

    # –í–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É –ø–æ—à—É–∫—É –∫—Ä–∞—â–æ—ó —Ü—ñ–Ω–∏
    print("\n–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫—É —Ü—ñ–Ω—É –±—Ä–∞—Ç–∏ —è–∫ –∫—Ä–∞—â—É:")
    print("1 - –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞")
    print("2 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞")
    print("3 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 1")
    choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1/2/3): ").strip()
    def find_best(row):
        providers = ['Pxn', 'SkyTel', 'SmartNet', 'SVM', 'RingHD']
        prices = {}
        increments = {}

        for p in providers:
            price = row.get(f'{p} Price')
            increment = row.get(f'{p} Increment')
            if pd.notna(price):
                try:
                    prices[p] = float(price)
                    increments[p] = increment
                except:
                    continue

        if not prices:
            return pd.Series([None, None, None])

        if choice == '1':
            # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
            best_provider = min(prices, key=prices.get)
        elif choice == '2':
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞
            best_provider = max(prices, key=prices.get)
        elif choice == '3':
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ 1
            filtered_prices = {k: v for k, v in prices.items() if v <= 1}
            if filtered_prices:
                best_provider = max(filtered_prices, key=filtered_prices.get)
            else:
                # –Ø–∫—â–æ –≤—Å—ñ >1, –±–µ—Ä–µ–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∑ —É—Å—ñ—Ö
                best_provider = min(prices, key=prices.get)
        else:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞
            best_provider = min(prices, key=prices.get)

        best_price = prices[best_provider]
        best_increment = increments.get(best_provider, None)
        return pd.Series([best_price, best_provider, best_increment])

    df_all[['Best Price', 'Best Provider', 'Best Increment']] = df_all.apply(find_best, axis=1)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ Destination —Å–æ—Å–µ–¥–Ω–∏–º–∏ –ø–æ —Å—Ç—Ä–æ–∫–µ
    destination_cols = ['Destination Pxn', 'Destination SkyTel', 'Destination SmartNet',
                        'Destination SVM', 'Destination RingHD']

    def fill_destinations(row):
        values = [row[col] for col in destination_cols if pd.notna(row[col]) and row[col] != '-']
        if values:
            fill_value = values[0]
            for col in destination_cols:
                if pd.isna(row[col]) or row[col] == '-':
                    row[col] = fill_value
        return row

    df_all = df_all.apply(fill_destinations, axis=1)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è NaN –ø—Ä–æ—á–µ—Ä–∫–∞–º–∏
    df_all = df_all.fillna('-')

    # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüîç –ü–µ—Ä—à—ñ —Ä—è–¥–∫–∏ –∑–≤–µ–¥–µ–Ω–æ–≥–æ –∑–≤—ñ—Ç—É:")
    print(df_all.head())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    save_path = filedialog.asksaveasfilename(defaultextension='.xlsx', filetypes=[("Excel files", "*.xlsx")])
    if save_path:
        df_all.to_excel(save_path, index=False)
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {save_path}")
    else:
        print("‚ùå –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

if __name__ == '__main__':
    main()
